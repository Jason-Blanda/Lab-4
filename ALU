module ALU(A, B, Cin, opcode, St, F);

input [31:0] A;
input [31:0] B;
input Cin;
input [2:0] opcode;
wire [31:0] I0, I1, I2, I3, I4, I5, I6, I7;
output wire [3:0] St;
output wire [31:0] F;


assign I0[0] = A[0] ^ B[0];
assign I0[1] = A[1] ^ B[1];
assign I0[2] = A[2] ^ B[2];
assign I0[3] = A[3] ^ B[3];
assign I0[4] = A[4] ^ B[4];
assign I0[5] = A[5] ^ B[5];
assign I0[6] = A[6] ^ B[6];
assign I0[7] = A[7] ^ B[7];
assign I0[8] = A[8] ^ B[8];
assign I0[9] = A[9] ^ B[9];
assign I0[10] = A[10] ^ B[10];
assign I0[11] = A[11] ^ B[11];
assign I0[12] = A[12] ^ B[12];
assign I0[13] = A[13] ^ B[13];
assign I0[14] = A[14] ^ B[14];
assign I0[15] = A[15] ^ B[15];
assign I0[16] = A[16] ^ B[16];
assign I0[17] = A[17] ^ B[17];
assign I0[18] = A[18] ^ B[18];
assign I0[19] = A[19] ^ B[19];
assign I0[20] = A[20] ^ B[20];
assign I0[21] = A[21] ^ B[21];
assign I0[22] = A[22] ^ B[22];
assign I0[23] = A[23] ^ B[23];
assign I0[24] = A[24] ^ B[24];
assign I0[25] = A[25] ^ B[25];
assign I0[26] = A[26] ^ B[26];
assign I0[27] = A[27] ^ B[27];
assign I0[28] = A[28] ^ B[28];
assign I0[29] = A[29] ^ B[29];
assign I0[30] = A[30] ^ B[30];
assign I0[31] = A[31] ^ B[31];

assign I1[0] = A[0] & B[0];
assign I1[1] = A[1] & B[1];
assign I1[2] = A[2] & B[2];
assign I1[3] = A[3] & B[3];
assign I1[4] = A[4] & B[4];
assign I1[5] = A[5] & B[5];
assign I1[6] = A[6] & B[6];
assign I1[7] = A[7] & B[7];
assign I1[8] = A[8] & B[8];
assign I1[9] = A[9] & B[9];
assign I1[10] = A[10] & B[10];
assign I1[11] = A[11] & B[11];
assign I1[12] = A[12] & B[12];
assign I1[13] = A[13] & B[13];
assign I1[14] = A[14] & B[14];
assign I1[15] = A[15] & B[15];
assign I1[16] = A[16] & B[16];
assign I1[17] = A[17] & B[17];
assign I1[18] = A[18] & B[18];
assign I1[19] = A[19] & B[19];
assign I1[20] = A[20] & B[20];
assign I1[21] = A[21] & B[21];
assign I1[22] = A[22] & B[22];
assign I1[23] = A[23] & B[23];
assign I1[24] = A[24] & B[24];
assign I1[25] = A[25] & B[25];
assign I1[26] = A[26] & B[26];
assign I1[27] = A[27] & B[27];
assign I1[28] = A[28] & B[28];
assign I1[29] = A[29] & B[29];
assign I1[30] = A[30] & B[30];
assign I1[31] = A[31] & B[31];

assign I2[0] = A[0] | B[0];
assign I2[1] = A[1] | B[1];
assign I2[2] = A[2] | B[2];
assign I2[3] = A[3] | B[3];
assign I2[4] = A[4] | B[4];
assign I2[5] = A[5] | B[5];
assign I2[6] = A[6] | B[6];
assign I2[7] = A[7] | B[7];
assign I2[8] = A[8] | B[8];
assign I2[9] = A[9] | B[9];
assign I2[10] = A[10] | B[10];
assign I2[11] = A[11] | B[11];
assign I2[12] = A[12] | B[12];
assign I2[13] = A[13] | B[13];
assign I2[14] = A[14] | B[14];
assign I2[15] = A[15] | B[15];
assign I2[16] = A[16] | B[16];
assign I2[17] = A[17] | B[17];
assign I2[18] = A[18] | B[18];
assign I2[19] = A[19] | B[19];
assign I2[20] = A[20] | B[20];
assign I2[21] = A[21] | B[21];
assign I2[22] = A[22] | B[22];
assign I2[23] = A[23] | B[23];
assign I2[24] = A[24] | B[24];
assign I2[25] = A[25] | B[25];
assign I2[26] = A[26] | B[26];
assign I2[27] = A[27] | B[27];
assign I2[28] = A[28] | B[28];
assign I2[29] = A[29] | B[29];
assign I2[30] = A[30] | B[30];
assign I2[31] = A[31] | B[31];

assign I3[0] = ~(A[0] | B[0]);
assign I3[1] = ~(A[1] | B[1]);
assign I3[2] = ~(A[2] | B[2]);
assign I3[3] = ~(A[3] | B[3]);
assign I3[4] = ~(A[4] | B[4]);
assign I3[5] = ~(A[5] | B[5]);
assign I3[6] = ~(A[6] | B[6]);
assign I3[7] = ~(A[7] | B[7]);
assign I3[8] = ~(A[8] | B[8]);
assign I3[9] = ~(A[9] | B[9]);
assign I3[10] = ~(A[10] | B[10]);
assign I3[11] = ~(A[11] | B[11]);
assign I3[12] = ~(A[12] | B[12]);
assign I3[13] = ~(A[13] | B[13]);
assign I3[14] = ~(A[14] | B[14]);
assign I3[15] = ~(A[15] | B[15]);
assign I3[16] = ~(A[16] | B[16]);
assign I3[17] = ~(A[17] | B[17]);
assign I3[18] = ~(A[18] | B[18]);
assign I3[19] = ~(A[19] | B[19]);
assign I3[20] = ~(A[20] | B[20]);
assign I3[21] = ~(A[21] | B[21]);
assign I3[22] = ~(A[22] | B[22]);
assign I3[23] = ~(A[23] | B[23]);
assign I3[24] = ~(A[24] | B[24]);
assign I3[25] = ~(A[25] | B[25]);
assign I3[26] = ~(A[26] | B[26]);
assign I3[27] = ~(A[27] | B[27]);
assign I3[28] = ~(A[28] | B[28]);
assign I3[29] = ~(A[29] | B[29]);
assign I3[30] = ~(A[30] | B[30]);
assign I3[31] = ~(A[31] | B[31]);


fulladder_32bit inst0(A[31:0], B[31:0], Cin, St[3:0], I4[31:0]);
myshifter inst1(A[31:0], B[4:0], I5, I6);

assign I7 = 32'b0;

mux_8to1 inst2( I0, I1, I2, I3, I4, I5, I6, I7, opcode, F);


endmodule
